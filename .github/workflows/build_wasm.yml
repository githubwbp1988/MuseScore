name: 'Build: Wasm'

on:
  # pull_request:   At the moment disabled for pull_request
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode: devel, nightly, testing, stable'
        default: 'devel'
        required: true
  workflow_call:
    inputs:
      build_mode:
        description: 'Build mode: devel, nightly, testing, stable'
        default: 'devel'
        type: string
        required: true  

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Configure workflow
      env:
        pull_request_title: ${{ github.event.pull_request.title }}
      run: |
        bash ./buildscripts/ci/tools/make_build_mode_env.sh -e ${{ github.event_name }} -m ${{ inputs.build_mode }}
        BUILD_MODE=$(cat ./build.artifacts/env/build_mode.env)

        bash ./buildscripts/ci/tools/make_build_number.sh
        BUILD_NUMBER=$(cat ./build.artifacts/env/build_number.env)

        ADD_INFO="_${GITHUB_REF#refs/heads/}"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          ADD_INFO="_${{ github.event.pull_request.number }}_${pull_request_title}"
        fi
        UPLOAD_ARTIFACT_NAME="$(tr '":<>|*?/\\’' '_' <<<"MU4_${BUILD_NUMBER}_Wasm${ADD_INFO}")"

        echo "github.repository: ${{ github.repository }}"
        echo "BUILD_MODE=$BUILD_MODE" | tee -a $GITHUB_ENV
        echo "BUILD_NUMBER=$BUILD_NUMBER" | tee -a $GITHUB_ENV
        echo "UPLOAD_ARTIFACT_NAME=$UPLOAD_ARTIFACT_NAME" | tee -a $GITHUB_ENV

        echo "CCACHE_TIMESTAMP=$(date -u +"%F-%T")" | tee -a $GITHUB_ENV

    - name: Restore ccache files
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.ccache
        key: wasm-ccache-${{ env.CCACHE_TIMESTAMP }}
        restore-keys: wasm-ccache-
    - name: Setup ccache
      run: |
        sudo apt-get update && sudo apt-get install -y ccache
        bash ./buildscripts/ci/tools/setup_ccache_config.sh

    - name: Register gcc problem matcher
      run: echo "::add-matcher::.github/problem_matchers/gcc.json"

    - name: Restore thirdparty sources
      uses: actions/cache@v4
      with:
        path: wasm-thirdparty-src
        key: wasm-thirdparty-src-${{ hashFiles('build_wasm.yml') }}
        restore-keys: wasm-thirdparty-src-

    - name: Download the source code of third-party libraries required by FluidSynth, including libsndfile, libogg, and libvorbis
      run: |
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "github.workspace: ${{ github.workspace }}"
        mkdir -p wasm-thirdparty-src
        cd wasm-thirdparty-src
        [ -d libsndfile ] || git clone https://github.com/libsndfile/libsndfile.git
        [ -d libogg ] || git clone https://github.com/xiph/ogg.git libogg
        [ -d libvorbis ] || git clone https://github.com/xiph/vorbis.git libvorbis
        echo "libsndfile build ... "
        sudo apt install autoconf autogen automake build-essential libasound2-dev libflac-dev libogg-dev libtool libvorbis-dev libopus-dev libmp3lame-dev libmpg123-dev pkg-config
        cd libsndfile
        autoreconf -vif
        ./configure --enable-werror
        make
        make check
        mkdir -p CMakeBuild
        cd CMakeBuild
        cmake ..
        make
        cd ..
        cd ..
        echo "copy libsndfile/CMakeBuild/src/config.h to libsndfile/src/config.h"
        cp libsndfile/CMakeBuild/src/config.h libsndfile/src/config.h
        echo "copy libsndfile/include/sndfile.h to libsndfile/src/sndfile.h"
        cp libsndfile/include/sndfile.h libsndfile/src/sndfile.h
        echo "copy libsndfile/include/sndfile.hh to libsndfile/src/sndfile.hh"
        cp libsndfile/include/sndfile.hh libsndfile/src/sndfile.hh
        echo 'replace #include <config.h> with #include "config.h"'
        find libsndfile/src -type f -name '*.c' -exec sed -i 's|#include <config.h>|#include "config.h"|' {} \;
        echo "libogg build ..."
        cd libogg
        ./autogen.sh
        ./configure
        make
        make check
        mkdir -p build
        cd build
        cmake ..
        make
        cd ..
        cd ..
        echo "copy libogg/build/include/ogg/config_types.h to libogg/include/ogg/config.h"
        cp libogg/build/include/ogg/config_types.h libogg/include/ogg/config.h
        echo "libvorbis build ..."
        cd libvorbis
        ./autogen.sh
        ./configure
        make
        cmake .
        make
        cd ..
        cd ..

    - name: Install Qt
      uses: jurplel/install-qt-action@v4 
      with:
        version: '6.9.1'
        host: all_os
        target: 'wasm'
        arch: wasm_singlethread
        modules: 'qt5compat qtscxml qtshadertools' 

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          ninja-build \
          pkg-config \
          gettext \
          libffi-dev \
          libmount-dev \
          libpcre2-dev
        
        # install meson
        pip3 install meson

    - name: Setup environment
      run: |
        bash ./buildscripts/ci/linux/setup.sh --arch wasm

    - name: Download and extract GLib
      run: |
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        mkdir -p wasm-thirdparty-src
        mkdir -p wasm-thirdparty-built
        cd wasm-thirdparty-src
        echo "glib-2.74.0 downloading ... "
        wget https://download.gnome.org/sources/glib/2.74/glib-2.74.0.tar.xz
        tar -xf glib-2.74.0.tar.xz
        ls -la glib-2.74.0/
        
        cd ..

    - name: Create WASM cross-compilation file
      run: |
        cat > ${GITHUB_WORKSPACE}/wasm-cross.txt << EOF
        [binaries]
        # c = 'emcc'
        # cpp = 'em++'
        # ar = 'emar'
        # strip = 'emstrip'
        c = '${HOME}/build_tools/emsdk/upstream/emscripten/emcc'
        cpp = '${HOME}/build_tools/emsdk/upstream/emscripten/em++'
        ar = '${HOME}/build_tools/emsdk/upstream/emscripten/emar'
        strip = '${HOME}/build_tools/emsdk/upstream/emscripten/emstrip'
        pkg-config = 'pkg-config'

        [host_machine]
        # system = 'emscripten'
        system = '${HOME}/build_tools/emsdk/upstream/emscripten'
        cpu_family = 'wasm32'
        cpu = 'wasm32'
        endian = 'little'

        [built-in options]
        c_args = ['-s', 'WASM=1', '-O2', '-DEMSCRIPTEN']
        cpp_args = ['-s', 'WASM=1', '-O2', '-DEMSCRIPTEN']
        c_link_args = ['-s', 'WASM=1']
        cpp_link_args = ['-s', 'WASM=1']
        default_library = 'static'

        [properties]
        needs_exe_wrapper = true
        EOF

    - name: Build glib for WASM
      run: |
        cd ${GITHUB_WORKSPACE}/wasm-thirdparty-src/glib-2.74.0
        
        # set env variables
        export PKG_CONFIG_PATH=""
        export EMCC_CFLAGS="-s WASM=1 -O2"

        echo "Available meson options:"
        meson configure | grep -E "(tests|debug|assert|checks|libmount|selinux|xattr|libelf|man|dtrace|systemtap|pcre)"
        
        # configure meson building
        meson setup builddir \
          --cross-file=${GITHUB_WORKSPACE}/wasm-cross.txt \
          --prefix=${GITHUB_WORKSPACE}/wasm-thirdparty-built/glib \
          --libdir=lib \
          --default-library=static \
          --buildtype=release \
          -Dtests=false \
          -Dglib_debug=disabled \
          -Dglib_assert=false \
          -Dglib_checks=false \
          -Dlibmount=disabled \
          -Dselinux=disabled \
          -Dxattr=false \
          -Dlibelf=disabled \
          -Dman=false \
          -Ddtrace=false \
          -Dsystemtap=false 
        
        cd ../..

    - name: Compile glib
      run: |
        cd ${GITHUB_WORKSPACE}/wasm-thirdparty-src/glib-2.74.0
        
        # build
        meson compile -C builddir
        
        # install to the specified directory
        meson install -C builddir

        cd ../..

    - name: Verify glib build
      run: |
        echo "----- Checking glib build results:"
        ls -la ${GITHUB_WORKSPACE}/wasm-thirdparty-built/glib/
        ls -la ${GITHUB_WORKSPACE}/wasm-thirdparty-built/glib/include/
        ls -la ${GITHUB_WORKSPACE}/wasm-thirdparty-built/glib/lib/
        
        # check key file
        if [ -f "${GITHUB_WORKSPACE}/wasm-thirdparty-built/glib/include/glib-2.0/glib.h" ]; then
          echo "✓ glib.h found"
        else
          echo "✗ glib.h not found"
          exit 1
        fi
        
        if [ -f "${GITHUB_WORKSPACE}/wasm-thirdparty-built/glib/lib/glib-2.0/include/glibconfig.h" ]; then
          echo "✓ glibconfig.h found"
        else
          echo "✗ glibconfig.h not found"
          exit 1
        fi

    - name: Build
      env:
        CMAKE_PREFIX_PATH: ${{env.QT_ROOT_DIR}}
      run: |
        bash ./buildscripts/ci/wasm/build.sh -n ${{ env.BUILD_NUMBER }}
        echo "============== ccache ==============="
        ccache -sv
    - name: Package
      run: |
        bash ./buildscripts/ci/wasm/package.sh
    - name: Upload artifacts on GitHub
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.UPLOAD_ARTIFACT_NAME }}
        path: ./build.artifacts/
